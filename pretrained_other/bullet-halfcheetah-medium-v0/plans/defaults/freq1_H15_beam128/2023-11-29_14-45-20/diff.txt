diff --git a/config/offline.py b/config/offline.py
index 4c0a5da..f7189c4 100644
--- a/config/offline.py
+++ b/config/offline.py
@@ -46,7 +46,6 @@ base = {
         'termination_penalty': -100,
         'gpt_exp_name':  gpt_expname,
         'retnet_exp_name': retnet_expname,
-        'subdirectory': None,
 
         'discretizer': 'QuantileDiscretizer',
         'action_weight': 5,
diff --git a/scripts/plan.py b/scripts/plan.py
index 95ddd44..ebefc01 100644
--- a/scripts/plan.py
+++ b/scripts/plan.py
@@ -11,6 +11,8 @@ class Parser(utils.Parser):
     dataset: str = 'bullet-halfcheetah-medium-v0'
     model: str = 'retnet'
     config: str = 'config.offline'
+    render: str = 'True'
+    subdirectory: str = None
 
 #######################
 ######## setup ########
@@ -26,17 +28,16 @@ loadpath = args.gpt_loadpath if args.model == "gpt" else args.retnet_loadpath
 args.exp_name = args.gpt_exp_name if args.model == "gpt" else args.retnet_exp_name
 
 dataset = utils.load_from_config(args.logbase, args.dataset, loadpath,
-        'data_config.pkl')
+        'data_config.pkl', subdirectory=args.subdirectory)
 
 model, model_epoch = utils.load_model(args.logbase, args.dataset, loadpath,
-        epoch=args.model_epoch, device=args.device)
+        epoch=args.model_epoch, device=args.device, subdirectory=args.subdirectory)
 
 if args.model == "retnet":
     model.chunkwise_recurrent = False
 time_str = datetime.now().strftime('%Y_%m_%d-%H_%M_%S')
 writer = SummaryWriter(log_dir=f"runs/plan/{args.model}_{args.dataset}_{time_str}")
-
-score, t, total_reward, terminal = evaluate(model, dataset, writer, args, render=True)
+score, t, total_reward, terminal = evaluate(model, dataset, writer, args, render=(args.render == 'True'))
 
 writer.close()
 
diff --git a/trajectory/utils/serialization.py b/trajectory/utils/serialization.py
index 58c0879..b9244b0 100644
--- a/trajectory/utils/serialization.py
+++ b/trajectory/utils/serialization.py
@@ -37,7 +37,7 @@ def get_latest_epoch(loadpath):
     return latest_epoch
 
 
-def load_model(*loadpath, epoch=None, device='cuda:0'):
+def load_model(*loadpath, subdirectory=None, epoch=None, device='cuda:0'):
     """
     Load a model from a directory of saved states.
     """
@@ -45,7 +45,10 @@ def load_model(*loadpath, epoch=None, device='cuda:0'):
     config_path = os.path.join(loadpath_all, 'model_config.pkl')
     if not os.path.isfile(config_path):
         loadpath_all = os.path.join(*loadpath)
-        loadpath_all = os.path.join(loadpath_all, os.listdir(loadpath_all)[-1])
+        if subdirectory is None:
+            loadpath_all = os.path.join(loadpath_all, os.listdir(loadpath_all)[0])
+        else:
+            loadpath_all = os.path.join(loadpath_all, subdirectory)
         config_path = os.path.join(loadpath_all, 'model_config.pkl')
 
     if epoch == 'latest':
@@ -67,14 +70,18 @@ def load_model(*loadpath, epoch=None, device='cuda:0'):
     return model, epoch
 
 
-def load_config(*loadpath):
+def load_config(*loadpath, subdirectory=None):
     """
     Load a config from a pickle file.
     """
     loadpath_all = os.path.join(*loadpath)
     if not os.path.isfile(loadpath_all):
         loadpath_all = os.path.join(*loadpath[:-1])
-        loadpath_all = os.path.join(loadpath_all, os.listdir(loadpath_all)[-1])
+        if subdirectory is None:
+            loadpath_all = os.path.join(loadpath_all, os.listdir(loadpath_all)[0])
+        else:
+            print(subdirectory)
+            loadpath_all = os.path.join(loadpath_all, subdirectory)
         loadpath_all = os.path.join(loadpath_all, loadpath[-1])
     config = pickle.load(open(loadpath_all, 'rb'))
     print(f'[ utils/serialization ] Loaded config from {loadpath_all}')
@@ -82,11 +89,11 @@ def load_config(*loadpath):
     return config
 
 
-def load_from_config(*loadpath):
+def load_from_config(*loadpath, subdirectory=None):
     """
     Load a config and make an instance of the class.
     """
-    config = load_config(*loadpath)
+    config = load_config(*loadpath, subdirectory=subdirectory)
     return config.make()
 
 